"""
Django settings for fractal project.

Generated by 'django-admin startproject' using Django 1.11.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

#import logging.config
#from django.utils.log import DEFAULT_LOGGING
#
## Disable Django's logging setup
#LOGGING_CONFIG = None
#
#LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()
#
#logging.config.dictConfig({
#    'version': 1,
#    'disable_existing_loggers': False,
#    'formatters': {
#        'default': {
#            # exact format is not important, this is the minimum information
#            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
#            },
#        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
#        },
#    'handlers': {
#        # console logs to stderr
#        'console': {
#            'class': 'logging.StreamHandler',
#            'formatter': 'default',
#            },
#        # Add Handler for Sentry for `warning` and above
#        'sentry': {
#            'level': 'WARNING',
#            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
#            },
#        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
#        },
#    'loggers': {
#        # default for all undefined Python modules
#        '': {
#            'level': 'WARNING',
#            'handlers': ['console', 'sentry'],
#            },
#        # Our application code
#        'app': {
#            'level': LOGLEVEL,
#            'handlers': ['console', 'sentry'],
#            # Avoid double logging because of root logger
#            'propagate': False,
#            },
#        # Prevent noisy modules from logging to Sentry
#        'noisy_module': {
#            'level': 'ERROR',
#            'handlers': ['console'],
#            'propagate': False,
#            },
#        # Default runserver request logging
#        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
#        },
#    })

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cxh2k9$$6wukc!(v*ka5_@rokms(7h$geq214n6dt)e$53k9gq'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['fractal.edu.pe', 'localhost']
#ALLOWED_HOSTS = ['localhost']


# Application definition

INSTALLED_APPS = [
    'asistencia.apps.AsistenciaConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'asistencia.middleware.SetupFractal',
]

ROOT_URLCONF = 'fractal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fractal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'HOST': 'db', # set in docker-compose.yml
        'PORT': 5432 # default postgres port
        }
    }


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = '/'

# Graph model tool
# https://django-extensions.readthedocs.io/en/latest/graph_models.html
GRAPH_MODELS = {
          'all_applications': True,
            'group_models': True,
            }
